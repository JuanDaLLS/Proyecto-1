class Registro:
    def __init__(self, **kwargs):
        self.__nombre = kwargs.get('nombre')
        self.__edad = kwargs.get('edad')
        self.__carne = kwargs.get('carne')
        self.__correo = kwargs.get('correo')
        self.__tipo = (kwargs.get('tipo') or "").lower().strip()
        self.cursos = []
        self.calificaciones = {}

    def mostrar_info(self):
        nombre = self.__nombre or ""
        edad = self.__edad if self.__edad is not None else ""
        carne = self.__carne or ""
        correo = self.__correo or ""
        tipo = self.__tipo or ""
        return f"Nombre: {nombre}, Edad: {edad}, Carné: {carne}, Correo: {correo}, Tipo: {tipo}"

    def get_carne(self):
        return self.__carne

    def get_tipo(self):
        return self.__tipo

    def get_nombre(self):
        return self.__nombre


class SistemaRegistro:
    def __init__(self):
        self.usuarios = []
        self.carnets_registrados = set()
        self.cursos_disponibles = [
            "Programación", "Cálculo", "Análisis y Laboratorio de Datos",
            "Física", "Estrategias de Comunicación Lingüística"
        ]
        # evaluaciones[curso] = [{"pregunta":..., "opciones":{a,b,c,d}, "correcta": "a"}, ...]
        self.evaluaciones = {}

    @staticmethod
    def _correo_valido(correo: str) -> bool:
        # Validación sencilla: contiene @ y un punto después
        return "@" in correo and "." in correo.split("@")[-1]

    def registrar_nuevo_usuario(self):
        print("\n--- REGISTRAR NUEVO USUARIO ---")
        # Carné
        while True:
            nuevoCarne = input("Ingrese el carné: ").strip()
            if not nuevoCarne:
                print("El carné no puede estar vacío.")
                continue
            if nuevoCarne in self.carnets_registrados:
                print(f"Carné {nuevoCarne} ya existe. Intente con otro.")
            else:
                break

        # Nombre
        nuevoNombre = input("Ingrese el nombre: ").strip()
        if not nuevoNombre:
            print("El nombre no puede estar vacío.")
            return

        # Edad
        while True:
            try:
                nuevoEdad = int(input("Ingrese la edad: ").strip())
                if nuevoEdad <= 0:
                    print("La edad debe ser mayor a 0.")
                    continue
                break
            except ValueError:
                print("Edad inválida. Intente de nuevo (número entero).")

        # Correo
        while True:
            nuevoCorreo = input("Ingrese el correo: ").strip()
            if not self._correo_valido(nuevoCorreo):
                print("Correo inválido. Debe contener '@' y dominio válido.")
            else:
                break

        # Tipo
        while True:
            nuevoTipo = input("Ingrese el tipo de Miembro (profesor/estudiante): ").strip().lower()
            if nuevoTipo in ("profesor", "estudiante"):
                break
            else:
                print("Tipo no válido. Debe ser 'profesor' o 'estudiante'.")

        nuevo_usuario = Registro(
            nombre=nuevoNombre,
            edad=nuevoEdad,
            carne=nuevoCarne,
            correo=nuevoCorreo,
            tipo=nuevoTipo
        )
        self.usuarios.append(nuevo_usuario)
        self.carnets_registrados.add(nuevoCarne)
        print(f"¡Usuario {nuevoNombre} registrado exitosamente!")

    def mostrar_todos_usuarios(self):
        print("\n--- LISTA DE USUARIOS REGISTRADOS ---")
        if not self.usuarios:
            print("No hay usuarios registrados.")
            return
        for i, usuario in enumerate(self.usuarios, start=1):
            print(f"{i}. {usuario.mostrar_info()}")
        print(f"Total: {len(self.usuarios)} usuarios")

    def _buscar_estudiante_por_carne(self, carne):
        for u in self.usuarios:
            if u.get_carne() == carne and u.get_tipo() == "estudiante":
                return u
        return None

    def inscribir_curso(self):
        carne = input("Ingrese el carné del estudiante: ").strip()
        estudiante = self._buscar_estudiante_por_carne(carne)
        if estudiante is None:
            print("No se encontró el estudiante con ese carné.")
            return
        print("\n--- CURSOS DISPONIBLES ---")
        for i, curso in enumerate(self.cursos_disponibles, start=1):
            print(f"{i}. {curso}")
        opcion = input(f"Seleccione un curso (1-{len(self.cursos_disponibles)}): ").strip()
        try:
            opcion_num = int(opcion)
            if 1 <= opcion_num <= len(self.cursos_disponibles):
                curso = self.cursos_disponibles[opcion_num - 1]
                if curso not in estudiante.cursos:
                    estudiante.cursos.append(curso)
                    print(f"{estudiante.get_nombre()} inscrito en {curso}")
                else:
                    print("El estudiante ya está inscrito en este curso.")
            else:
                print("Opción fuera de rango.")
        except ValueError:
            print("Opción inválida (ingrese un número).")

    def crear_evaluacion(self):
        print("\n--- CREAR EVALUACIÓN ---")
        for i, curso in enumerate(self.cursos_disponibles, start=1):
            print(f"{i}. {curso}")
        opcion = input(f"Seleccione un curso (1-{len(self.cursos_disponibles)}): ").strip()
        try:
            opcion_num = int(opcion)
            if 1 <= opcion_num <= len(self.cursos_disponibles):
                curso = self.cursos_disponibles[opcion_num - 1]
                preguntas = []
                for idx in range(1, 11):
                    print(f"\nPregunta {idx}:")
                    enunciado = input("Escriba la pregunta: ").strip()
                    opciones = {
                        "a": input("Opción a: ").strip(),
                        "b": input("Opción b: ").strip(),
                        "c": input("Opción c: ").strip(),
                        "d": input("Opción d: ").strip(),
                    }
                    correcta = ""
                    while correcta not in ("a", "b", "c", "d"):
                        correcta = input("¿Cuál es la opción correcta? (a/b/c/d): ").strip().lower()
                    preguntas.append({"pregunta": enunciado, "opciones": opciones, "correcta": correcta})
                self.evaluaciones[curso] = preguntas
                print(f"Evaluación creada para {curso}")
            else:
                print("Opción fuera de rango.")
        except ValueError:
            print("Opción inválida (ingrese un número).")

    def registrar_calificacion(self):
        carne = input("Ingrese el carné del estudiante: ").strip()
        estudiante = self._buscar_estudiante_por_carne(carne)
        if estudiante is None:
            print("No se encontró el estudiante.")
            return
        if not estudiante.cursos:
            print("El estudiante no tiene cursos inscritos.")
            return
        print("\nCursos inscritos:")
        for i, curso in enumerate(estudiante.cursos, start=1):
            print(f"{i}. {curso}")
        opcion = input("Seleccione un curso: ").strip()
        try:
            opcion_num = int(opcion)
            if 1 <= opcion_num <= len(estudiante.cursos):
                curso = estudiante.cursos[opcion_num - 1]
                nota = input("Ingrese la calificación (0-100): ").strip()
                try:
                    nota_val = float(nota)
                    if not (0.0 <= nota_val <= 100.0):
                        print("La calificación debe estar entre 0 y 100.")
                        return
                    estudiante.calificaciones.setdefault(curso, []).append(nota_val)
                    print(f"Nota registrada en {curso} para {estudiante.get_nombre()}")
                except ValueError:
                    print("Calificación inválida (número).")
            else:
                print("Opción fuera de rango.")
        except ValueError:
            print("Opción inválida (ingrese un número).")

    def ver_cursos_usuario(self):
        carne = input("Ingrese el carné: ").strip()
        usuario = next((u for u in self.usuarios if u.get_carne() == carne), None)
        if not usuario:
            print("No se encontró el usuario.")
            return
        if usuario.get_tipo() == "estudiante":
            cursos = usuario.cursos
        else:
            # Por ahora: cursos con evaluación creada (placeholder de asignación docente)
            cursos = [curso for curso in self.cursos_disponibles if curso in self.evaluaciones]
        if cursos:
            print("\nCursos asignados:")
            for c in cursos:
                print(f"- {c}")
        else:
            print("Sin cursos asignados.")

    def reporte_promedios_bajos(self):
        print("\n--- REPORTE: ESTUDIANTES CON PROMEDIO BAJO (<60) ---")
        encontrado = False
        for u in self.usuarios:
            if u.get_tipo() == "estudiante":
                for curso, notas in u.calificaciones.items():
                    if notas:
                        promedio = sum(notas) / len(notas)
                        if promedio < 60:
                            print(f"{u.get_nombre()} - {curso}: {promedio:.2f}")
                            encontrado = True
        if not encontrado:
            print("No hay estudiantes con promedio bajo.")

    def menu_principal(self):
        while True:
            print("="*50)
            print("SISTEMA DE REGISTRO DE USUARIOS")
            print("="*50)
            print("1. Registrar nuevo usuario")
            print("2. Ver todos los usuarios")
            print("3. Inscribir estudiante en curso")
            print("4. Crear evaluación")
            print("5. Registrar calificación")
            print("6. Ver cursos por usuario")
            print("7. Ver promedios bajos")
            print("8. Salir")
            print("="*50)
            opcion = input("Seleccione una opción (1-8): ").strip()
            if opcion == "1":
                self.registrar_nuevo_usuario()
            elif opcion == "2":
                self.mostrar_todos_usuarios()
            elif opcion == "3":
                self.inscribir_curso()
            elif opcion == "4":
                self.crear_evaluacion()
            elif opcion == "5":
                self.registrar_calificacion()
            elif opcion == "6":
                self.ver_cursos_usuario()
            elif opcion == "7":
                self.reporte_promedios_bajos()
            elif opcion == "8":
                print("Finalizado")
                break
            else:
                print("Opción no válida. Intente de nuevo.")



sistema = SistemaRegistro()
sistema.menu_principal()
